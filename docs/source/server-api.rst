
Using server API
================

Setup
~~~~~

**Note:** writing credentials to memory is probably not the best idea. All you need is ``setup`` function that executes each time service is up. Server will consistently return your credentials (that you acquired after first setup)  

To register on the server you need to send post request to your server's url on the following path (where ``example.com`` is your server's domain) - ``example.com/api/setup``  

Request data:  
``  
{  
    "security_token": SERVER_TOKEN,  
    "url": "{your_app_url}/api/webhook/out"  
}  
``
Server will send messages to the ``"url"``, so it's setup is required (webhook logic)  

Response data:  
``  
{  
    "token": "YOUR_UNIQUE_SECURITY_TOKEN",  
    "name": "YOUR_CREDENTIALS_UNQIUE_NAME"  
}  
``
Both of the value above are required for all following requests

Process messages
~~~~~~~~~~~~~~~~

Request data:  
``  
{  
    "user": {  
         "first_name": name,  
         "user_id": user_id  
    },  
    "chat": {  
         "chat_id": chat_id  
    },  
    "service_in": service_name,  
    "security_token": $(token),  
    "via_instance": $(name),  
    "has_message": True,  
    "message": {  
        "text": text  
    }  
}  
``

Values:  
  - ``name:``  
    
    - user's name, should always be present to avoid confusions and ease person-to-person communication  
    - ``type: str``  
  
  - ``user_id:``  
    
    - unqiue id of the user (for example generated by uuid.uuid4)  
    - ``type: str|int``  
  
  - ``chat_id:``  
    
    - unique id of the chat. **Note: when message is send to the user, you should use chat_id to identify recipient. user_id might be different in person-to-person communication (user_id of the sender)**  
    - ``type: str|int``  
  
  - ``text:``  
    
    - user's message  
    - ``type: str``  
